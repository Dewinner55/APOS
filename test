Посмотри на код. Слушай меня внимательно. Не спорь! Не предлагай того что не указано в задаче. Мне необходимо в функции updateCookiesAndCheckToken вызвать фукнцию withAuth, в функции withAuth я вызваю функцию updateCookiesAndCheckToken  только в том случае когда нет кук access_token, но есть refresh_token - попытка обновления токенов if (!hasAccessToken && hasRefreshToken), если их нет я вызваю функцию updateCookiesAndCheckToken , а в функции updateCookiesAndCheckToken  я уже вызваю withAuth которую в свою очередь вызовет updateCookiesAndCheckToken  если нет кук access_token, но есть refresh_token.

Сделай что я тебе указал и только это.

export function withAuth(gssp: EnhancedGetServerSideProps): GetServerSideProps { // @ts-ignore return async (context: GetServerSidePropsContext): Promise<GetServerSidePropsResult<any>> => { const {req, res, locale, resolvedUrl} = context; const cookies = req.headers.cookie || ''; // Изначальная обработка куки const referer = req.headers.referer || 'http://localhost:3009/defaultReferer'; // Проверка наличия access_token const hasAccessToken = cookies.includes('access_token='); const hasRefreshToken = cookies.includes('refresh_token='); // Если нет access_token, но есть refresh_token - попытка обновления токенов if (!hasAccessToken && hasRefreshToken) { const newCookies = await refreshToken(cookies, referer); // Установим новые куки для access_token и refresh_token res.setHeader('Set-Cookie', newCookies); ({ cookies, hasAccessToken } = updateCookiesAndCheckToken(newCookies)); } // Если нет refresh_token, перенаправляем на логин if (!hasRefreshToken) { return {redirect: {destination: '/pages/login', permanent: false,},}; } // Если access_token все еще нет после попытки обновления, перенаправляем на логин if (!hasAccessToken) { return {redirect: {destination: '/pages/login', permanent: false,},}; } // Всегда обновляем user_profile и user_profile_exp при наличии access_token const {userProfile, userProfileToken, exp} = await getUserProfile(cookies, referer); const userProfileCookie = `user_profile=${userProfileToken}; path=/; Secure; HttpOnly; SameSite=Strict; expires=${new Date(exp * 1000).toUTCString()}`; const expCookie = `user_profile_exp=${exp}; path=/; SameSite=Strict; expires=${new Date(exp * 1000).toUTCString()}`; // Устанавливаем новые куки для user_profile и user_profile_exp res.setHeader('Set-Cookie', [userProfileCookie, expCookie]); // Проверка и установка user_profile из нового токена const tokenPart = userProfileToken; const verifiedUserProfile = jwt.verify(tokenPart, 'your-secret-key') as User; const userLocale = verifiedUserProfile?.user_settings?.system_language || 'en'; if (userLocale !== locale) { const redirectUrl = ensureLanguageSegment(resolvedUrl, userLocale); return {redirect: {destination: redirectUrl, permanent: false,},}; } const enhancedContext: EnhancedGetServerSidePropsContext = {...context, userProfile: verifiedUserProfile}; return await gssp(enhancedContext); }; } export function updateCookiesAndCheckToken(newCookies: string[]): { cookies: string, hasAccessToken: boolean } { const cookies = newCookies.map((cookie: string) => cookie.split(';')[0]).join('; '); const hasAccessToken = cookies.includes('access_token='); return { cookies, hasAccessToken }; }


export function withAuth(gssp: EnhancedGetServerSideProps): GetServerSideProps { // @ts-ignore return async (context: GetServerSidePropsContext): Promise<GetServerSidePropsResult<any>> => { const {req, res, locale, resolvedUrl} = context; let cookies = req.headers.cookie || ''; // Изначальная обработка куки const referer = req.headers.referer || 'http://localhost:3009/defaultReferer'; // Проверка наличия access_token let hasAccessToken = cookies.includes('access_token='); const hasRefreshToken = cookies.includes('refresh_token='); let newCookies: string[] = [] // Если нет access_token, но есть refresh_token - попытка обновления токенов if (!hasAccessToken && hasRefreshToken) { newCookies = await refreshToken(cookies, referer); // Установим новые куки для access_token и refresh_token res.setHeader('Set-Cookie', newCookies); // Обновим переменную cookies с новыми значениями и проверим наличие access_token cookies = newCookies.map((cookie: string) => cookie.split(';')[0]).join('; '); hasAccessToken = cookies.includes('access_token='); } console.log('res1111111', req.headers) // Если нет refresh_token, перенаправляем на логин if (!hasRefreshToken) { return {redirect: {destination: '/pages/login', permanent: false,},}; } // Если access_token все еще нет после попытки обновления, перенаправляем на логин if (!hasAccessToken) { return {redirect: {destination: '/pages/login', permanent: false,},}; } // Всегда обновляем user_profile и user_profile_exp при наличии access_token const {userProfile, userProfileToken, exp} = await getUserProfile(cookies, referer); const userProfileCookie = `user_profile=${userProfileToken}; path=/; Secure; HttpOnly; SameSite=Strict; expires=${new Date(exp * 1000).toUTCString()}`; const expCookie = `user_profile_exp=${exp}; path=/; SameSite=Strict; expires=${new Date(exp * 1000).toUTCString()}`; // Устанавливаем новые куки для user_profile и user_profile_exp res.setHeader('Set-Cookie', [...newCookies, userProfileCookie, expCookie]); console.log('res222222', req.headers) // Проверка и установка user_profile из нового токена const tokenPart = userProfileToken; const verifiedUserProfile = jwt.verify(tokenPart, 'your-secret-key') as User; const userLocale = verifiedUserProfile?.user_settings?.system_language || 'en'; if (userLocale !== locale) { const redirectUrl = ensureLanguageSegment(resolvedUrl, userLocale); return {redirect: {destination: redirectUrl, permanent: false,},}; } const enhancedContext: EnhancedGetServerSidePropsContext = {...context, userProfile: verifiedUserProfile}; return await gssp(enhancedContext); }; }
